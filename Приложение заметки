#начни тут создавать приложение с умными заметками
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import  QLabel, QWidget, QApplication, QVBoxLayout, QHBoxLayout,QPushButton,QButtonGroup, QTextEdit, QListWidget, QLineEdit, QInputDialog
import json
#приложение
app = QApplication([])
#main.resize(500, 400)
window = QWidget()
window.setWindowTitle('Умные заметки')
#создание виджетов
text_notes = QTextEdit()
label_notes = QLabel('Список заметок:')
list_notes = QListWidget()
#создать кнопку создать заметку
answer_note = QPushButton('Создать заметку')
answer_delete = QPushButton('Удалить заметку')
answer_save = QPushButton('Сохранить заметку')
answer_teg = QLabel('Список тегов')
answer_list_note = QListWidget()
answer_entry_field  = QLineEdit()
answer_give_teg = QPushButton('Добавить тег')
answer_delete_teg = QPushButton('Удалить тег')
answer_search_teg = QPushButton('Искать по тегу')
answer_entry_field.setPlaceholderText('Введите тег:')
main_line = QHBoxLayout()
v_line = QVBoxLayout()
h_line1 = QHBoxLayout()
h_line2 = QHBoxLayout()
main_line.addWidget(text_notes)
v_line.addWidget(label_notes)
v_line.addWidget(list_notes)
window.setLayout(main_line)
h_line1.addWidget(answer_note)
h_line1.addWidget(answer_delete)
v_line.addLayout(h_line1)
v_line.addWidget(answer_save)
v_line.addWidget(answer_teg)
v_line.addWidget(answer_list_note)
v_line.addWidget(answer_entry_field)
v_line.addLayout(h_line2)
h_line2.addWidget(answer_give_teg)
h_line2.addWidget(answer_delete_teg)
h_line2.addWidget(answer_search_teg)
'''notes={
"О планетах" :
    {"текст" : "Что если вода на Марсе это признак жизни?",
     "теги"  : ["Марс", "гипотезы"]},
"О черных дырах" :
    {"текст" : "Перфораторы и кабочки",
     "теги"  : ["черные дыры", "факты"]}
}
with open("notes.json", "w") as file:
    json.dump(notes , file)'''
with open("notes.json", "r") as file:
    notes = json.load(file)
list_notes.addItems(notes)
def show_note():
    name = list_notes.selectedItems()[0].text()
    text_notes.setText(notes[name]["текст"])
    answer_list_note.clear() 
    answer_list_note.addItems(notes[name]["теги"])
list_notes.itemClicked.connect(show_note)
#Кнопка добавить заметку
def add_note():
    note_name, result = QInputDialog.getText(window , "Добавить заметку", "Название заметки")
    if result and note_name != "":
        list_notes.addItem(note_name)
        notes[note_name] = {'текст' :"", "теги":[]}
answer_note.clicked.connect(add_note)
#Кнопка сохранить заметку
def save_note():
    name = list_notes.selectedItems()[0].text()
    if name != None:
        text = text_notes.toPlainText()
        notes[name]["текст"] = text
        with open("notes.json", "w") as file:
            json.dump(notes , file)
answer_save.clicked.connect(save_note)
#Кнопка удалить заметку
def del_note():
    name = list_notes.selectedItems()[0].text()
    if name != None:
        del notes[name]
    with open("notes.json", "w") as file:
        json.dump(notes , file)    
    list_notes.clear()
    text_notes.clear()
    answer_teg.clear()
    answer_entry_field.clear()
    list_notes.addItems(notes)
answer_delete.clicked.connect(del_note)
#Кнопка добавить тег 
def add_teg():
    name = list_notes.selectedItems()[0].text()
    if name != None:
        name_tag = answer_entry_field.text()
        if name_tag not in notes[name]["теги"]:
            notes[name]['теги'].append(name_tag)
            answer_entry_field.clear()
            with open("notes.json", "w") as file:
                json.dump(notes , file)
            answer_list_note.addItem(name_tag)
answer_give_teg.clicked.connect(add_teg)
#Кнопка удалить тег
def del_teg():
    name = list_notes.selectedItems()
    if name != None:
        name = name[0].text()
        name_tag = answer_list_note.selectedItems()
        if name_tag != None:
            name_tag = name_tag[0].text()
            notes[name]['теги'].remove(name_tag)
            with open("notes.json", "w") as file:
                json.dump(notes , file)
            answer_list_note.clear()
            answer_list_note.addItems(notes[name]['теги'])
answer_delete_teg.clicked.connect(del_teg)
#Кнопка поиск по тегу
def search():
    if answer_search_teg.text() == 'Искать по тегу':
        notes_filtr = {}
        name_tag = answer_entry_field.text()
        for note in notes:
            if name_tag in notes[note]["теги"]:
                notes_filtr[note] = notes[note]
        list_notes.clear()
        list_notes.addItems(notes_filtr)
        answer_list_note.clear()
        text_notes.clear()
        answer_search_teg.setText("Сбросить поиск")
    elif answer_search_teg.text() == 'Сбросить поиск':
        answer_search_teg.setText('Искать по тегу')
        list_notes.clear()
        list_notes.addItems(notes)
        answer_list_note.clear()
        answer_entry_field.clear()
answer_search_teg.clicked.connect(search)
window.setLayout(main_line)
main_line.addLayout(v_line)
try:
    window.show()
    app.exec()
except:
    print('Возникла ошибка!')
